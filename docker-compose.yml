version: '3.8' # Versão do Docker
name: 'tcc-chat-gpt'
services:

  # Container responsável por executar o banco de dados PostgresSQL juntamente com o PGVector
  db:
    image: pgvector/pgvector:pg16
    ports:
      - '5434:5432'
    environment:
      - POSTGRES_DB=postgres-docker-gpt
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    labels:
      - org.springframework.boot.service-connection=postgres
    volumes:
      - pgvector_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Container responsável por executar o backend java da aplicação
  backend-spring-ai:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres-docker-gpt
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_AI_OLLAMA_BASE_URL=http://ollama-llm:11434/
      - SPRING_PROFILES_ACTIVE=docker
      - API_SECURITY_TOKEN_SECRET=my-secret-key
      - API_SECURITY_TOKEN_EXPIRATION_HOURS=2
      - FILE_PATH=/app/data
    command: ["java", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005", "-jar", "spring-ai-llama.jar"]
    volumes:
      - ollama_data:/root/.ollama
      - data:/app/data
    depends_on:
      - db
    networks:
      - app-network

  # Container responsável por executar o frontend da aplicação
  frontend:
    build:
      context: ./frontend
    ports:
      - "5173:80" 
    networks:
      - app-network

  # Volumes da aplicação, armazenam a extensão PGVector, o Ollama, e o banco de dados
volumes:
  pgvector_data:
  ollama_data:
  data:

networks:
  app-network:
    driver: bridge